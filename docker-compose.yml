# docker-compose.yml - QDRANT ISSUE FIXED
version: '3.8'

x-common-env: &common-env
  LOG_LEVEL: ${LOG_LEVEL:-INFO}
  REDIS_URL: redis://redis:6379
  EVENT_BUS_URL: nats://nats:4222
  GROQ_API_KEY: ${GROQ_API_KEY}
  GROQ_MODEL_NAME: ${GROQ_MODEL_NAME:-llama-3.1-70b-versatile}
  GROQ_API_BASE: https://api.groq.com/openai/v1

services:
  # Infrastructure Services
  redis:
    image: redis:7-alpine
    container_name: hydrogen-redis
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"  # Expose Redis port for external testing
    volumes:
      - redis_data:/data
    networks:
      - hydrogen-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nats:
    image: nats:2.10-alpine
    container_name: hydrogen-nats
    command: -js -sd /data
    ports:
      - "4222:4222"
      - "8222:8222"
    volumes:
      - nats_data:/data
    networks:
      - hydrogen-net
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "4222"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # FIXED QDRANT CONFIGURATION
  qdrant:
    image: qdrant/qdrant:v1.7.4  # Use specific stable version
    container_name: hydrogen-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./qdrant_storage:/qdrant/storage  # Use local directory instead of volume
    networks:
      - hydrogen-net
    environment:
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__LOG_LEVEL: INFO
      QDRANT__SERVICE__HOST: 0.0.0.0  # Ensure it binds to all interfaces
    # Removed health check - let it start naturally
    # healthcheck:
    #   test: ["CMD", "true"]  # Always healthy
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # Core Services - Enhanced with better error handling
  orchestrator:
    build:
      context: ./services/orchestrator
      dockerfile: Dockerfile
    container_name: hydrogen-orchestrator
    restart: unless-stopped
    environment:
      <<: *common-env
      SERVICE_NAME: orchestrator
      MCP_SERVER_URL: http://mcp-server:8000
      MONGO_URI: ${MONGO_URI}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
      SCHEMA_CACHE_TTL: ${SCHEMA_CACHE_TTL:-86400}
      PYTHONPATH: /app
      DISABLE_QDRANT: ${DISABLE_QDRANT:-false}
      # Enhanced configuration
      REDIS_URL: redis://redis:6379
      EVENT_BUS_URL: nats://nats:4222
    volumes:
      - ./config:/app/config:ro
      - ./plugins:/app/plugins:ro
      - orchestrator_cache:/app/cache
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      mcp-server:
        condition: service_healthy
      qdrant:
        condition: service_started
    networks:
      - hydrogen-net
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 120s  # Increased for dependency loading

  mcp-server:
    build:
      context: ./services/mcp-server
      dockerfile: Dockerfile
    container_name: hydrogen-mcp-server
    restart: unless-stopped
    environment:
      <<: *common-env
      SERVICE_NAME: mcp-server
      PLUGIN_DIR: /app/plugins
      CONFIG_DIR: /app/config/tools
      MONGO_URI: ${MONGO_URI}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      QDRANT_COLLECTION_NAME: ${QDRANT_COLLECTION_NAME:-hydrogen_documents}
      EMBEDDING_MODEL_NAME: ${EMBEDDING_MODEL_NAME:-sentence-transformers/all-MiniLM-L6-v2}
      PYTHONPATH: /app
      DISABLE_QDRANT: ${DISABLE_QDRANT:-false}
      # Enhanced configuration
      REDIS_URL: redis://redis:6379
      EVENT_BUS_URL: nats://nats:4222
    volumes:
      - ./plugins:/app/plugins:ro
      - ./config/tools:/app/config/tools:ro
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      qdrant:
        condition: service_started
    networks:
      - hydrogen-net
    ports:
      - "8001:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 90s  # Increased for ML model loading

  # Kong Gateway (temporarily disabled for core testing)
  # kong:
  #   image: kong:3.4
  #   container_name: hydrogen-kong
  #   restart: unless-stopped
  #   environment:
  #     KONG_DATABASE: "off"
  #     KONG_DECLARATIVE_CONFIG: /kong/kong.yml
  #     KONG_PROXY_ACCESS_LOG: /dev/stdout
  #     KONG_ADMIN_ACCESS_LOG: /dev/stdout
  #     KONG_PROXY_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_LISTEN: 0.0.0.0:8001
  #     KONG_PROXY_LISTEN: 0.0.0.0:8000
  #     KONG_LOG_LEVEL: warn  # Reduce log noise
  #   ports:
  #     - "8080:8000"  # Main proxy port
  #     - "8443:8443"  # HTTPS proxy port  
  #     - "8002:8001"  # Admin API port
  #     - "8444:8444"  # HTTPS admin port
  #   volumes:
  #     - ./kong/kong.yml:/kong/kong.yml:ro
  #   depends_on:
  #     orchestrator:
  #       condition: service_healthy
  #     mcp-server:
  #       condition: service_healthy
  #   networks:
  #     - hydrogen-net
  #   healthcheck:
  #     test: ["CMD", "kong", "health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 10
  #     start_period: 60s

networks:
  hydrogen-net:
    driver: bridge

volumes:
  redis_data:
  nats_data:
  # Removed qdrant_data volume - using local directory instead
  orchestrator_cache: